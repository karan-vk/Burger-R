{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submithandler","preventDefault","onAuth","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","id","config","form","formElement","elementtype","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.151b3217.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3n5-N\",\"Label\":\"Input_Label__1ta3a\",\"InputElement\":\"Input_InputElement__3rreW\",\"Invalid\":\"Input_Invalid__1SAc4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2msih\"};","import React, { Component } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Mail Address\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n    },\r\n    isSignup: true,\r\n  };\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true,\r\n      }),\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        isSignup: !prevState.isSignup,\r\n      };\r\n    });\r\n  };\r\n\r\n  submithandler = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key],\r\n      });\r\n    }\r\n    var form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementtype={formElement.config.elementtype}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    let errorMessage = null;\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submithandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button>\r\n        </form>\r\n        <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">\r\n          SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loading: state.auth.loading,\r\n  error: state.auth.error,\r\n  isAuthenticated: state.auth.token !== null,\r\n  buildingBurger: state.burgerBuilder.building,\r\n  authRedirectPath: state.auth.authRedirectPath,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath(\"/\")),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}