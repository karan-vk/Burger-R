{"version":3,"sources":["containers/CheckOut/Contact data/ContactactData.js","containers/CheckOut/Contact data/ContactData.module.css","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["ContactactData","state","orderForm","name","elementtype","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","delivery","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","udatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","invalid","shouldValidate","changed","btnType","clicked","disabled","loading","className","classes","ContactData","Component","connect","burgerBuilder","ingredient","totalPrice","auth","dispatch","actions","withErrorHandler","axios","module","exports","input","inputElement","inputClasses","InputElement","Invalid","elementType","join","onChange","option","Input","Label","label"],"mappings":"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","file":"static/js/4.2fb27e23.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../HOC/Error/ErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipcode: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zip\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, minLength: 5, maxLength: 5 },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      delivery: {\r\n        elementtype: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const udatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n    udatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in udatedOrderForm) {\r\n      formIsValid = udatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: udatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementtype={formElement.config.elementtype}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={this.orderHandler}\r\n          disabled={!this.state.formIsValid}\r\n        >\r\n          Order\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter Your contact list</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredient,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => {\r\n      dispatch(actions.purchaseBurger(orderData, token));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactactData, axios));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3CG45\"};","import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__26UKF\",\"Label\":\"Input_Label__20gBS\",\"InputElement\":\"Input_InputElement__3gEV4\",\"Invalid\":\"Input_Invalid__88JCH\"};"],"sourceRoot":""}