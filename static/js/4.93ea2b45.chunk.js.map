{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/CheckOut/Contact data/ContactactData.js","containers/CheckOut/Contact data/ContactData.module.css"],"names":["input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","ContactactData","state","orderForm","name","elementtype","type","placeholder","validation","required","valid","street","zipcode","minLength","maxLength","country","email","delivery","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","udatedOrderForm","setState","formElementsArray","this","id","config","form","onSubmit","formElement","btnType","clicked","disabled","loading","ContactData","Component","connect","burgerBuilder","ingredient","totalPrice","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"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","file":"static/js/4.93ea2b45.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from \"./Input.module.css\";\r\n\r\nconst input = (props) => {\r\n  let inputElement = null;\r\n  const inputClasses = [classes.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={inputClasses.join(\" \")}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        >\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3n5-N\",\"Label\":\"Input_Label__1ta3a\",\"InputElement\":\"Input_InputElement__3rreW\",\"Invalid\":\"Input_Invalid__1SAc4\"};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../HOC/Error/ErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidity } from \"../../../shared/utility\";\r\n\r\nclass ContactactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipcode: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zip\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, minLength: 5, maxLength: 5 },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      delivery: {\r\n        elementtype: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true,\r\n      }\r\n    );\r\n    const udatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement,\r\n    });\r\n    udatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in udatedOrderForm) {\r\n      formIsValid = udatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: udatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementtype={formElement.config.elementtype}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={this.orderHandler}\r\n          disabled={!this.state.formIsValid}\r\n        >\r\n          Order\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter Your contact list</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredient,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => {\r\n      dispatch(actions.purchaseBurger(orderData, token));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactactData, axios));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1VT5R\"};"],"sourceRoot":""}