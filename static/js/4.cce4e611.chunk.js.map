{"version":3,"sources":["containers/CheckOut/Contact data/ContactactData.js","containers/CheckOut/Contact data/ContactData.module.css"],"names":["ContactactData","state","orderForm","name","elementtype","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipcode","minLength","maxLength","country","email","delivery","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","checkvalidity","rules","isValid","trim","length","inputChangedHandler","inputIdentifier","udatedOrderForm","updatedFormElement","target","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","invalid","shouldValidate","changed","btnType","clicked","disabled","loading","className","classes","ContactData","Component","connect","burgerBuilder","ingredient","totalPrice","auth","dispatch","actions","withErrorHandler","axios","module","exports"],"mappings":"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","file":"static/js/4.cce4e611.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport withErrorHandler from \"../../../HOC/Error/ErrorHandler\";\r\nimport * as actions from \"../../../store/actions/index\";\r\n\r\nclass ContactactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Your Name\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      street: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Street\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      zipcode: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Zip\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true, minLength: 5, maxLength: 5 },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      country: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"text\",\r\n          placeholder: \"Country\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      email: {\r\n        elementtype: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"Your E-Mail\",\r\n        },\r\n        value: \"\",\r\n        validation: { required: true },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      delivery: {\r\n        elementtype: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" },\r\n          ],\r\n        },\r\n        value: \"fastest\",\r\n        validation: {},\r\n        valid: true,\r\n      },\r\n    },\r\n    formIsValid: false,\r\n  };\r\n  orderHandler = (event) => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n    for (let formElementIdentifier in this.state.orderForm) {\r\n      formData[formElementIdentifier] = this.state.orderForm[\r\n        formElementIdentifier\r\n      ].value;\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId,\r\n    };\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n  checkvalidity = (value, rules) => {\r\n    let isValid = true;\r\n    if (rules.required) {\r\n      isValid = value.trim() !== \"\" && isValid;\r\n    }\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const udatedOrderForm = {\r\n      ...this.state.orderForm,\r\n    };\r\n    const updatedFormElement = { ...udatedOrderForm[inputIdentifier] };\r\n    updatedFormElement.value = event.target.value;\r\n    updatedFormElement.valid = this.checkvalidity(\r\n      updatedFormElement.value,\r\n      updatedFormElement.validation\r\n    );\r\n    updatedFormElement.touched = true;\r\n    udatedOrderForm[inputIdentifier] = updatedFormElement;\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in udatedOrderForm) {\r\n      formIsValid = udatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    this.setState({ orderForm: udatedOrderForm, formIsValid: formIsValid });\r\n  };\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key],\r\n      });\r\n    }\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementtype={formElement.config.elementtype}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button\r\n          btnType=\"Success\"\r\n          clicked={this.orderHandler}\r\n          disabled={!this.state.formIsValid}\r\n        >\r\n          Order\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter Your contact list</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredient,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => {\r\n      dispatch(actions.purchaseBurger(orderData, token));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactactData, axios));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3CG45\"};"],"sourceRoot":""}