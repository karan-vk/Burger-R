{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","ingredient","push","name","amount","ingredientOutput","map","ig","key","style","textTransform","display","margin","border","padding","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","auth","dispatch","actions","withError","axios"],"mappings":"yGACAA,EAAOC,QAAU,CAAC,MAAQ,uB,qHCoCXC,EAlCD,SAACC,GACb,IAAMC,EAAc,GACpB,IAAK,IAAMC,KAAkBF,EAAMG,WACjCF,EAAYG,KAAK,CACfC,KAAMH,EACNI,OAAQN,EAAMG,WAAWD,KAG7B,IAAMK,EAAmBN,EAAYO,KAAI,SAACC,GACxC,OACE,0BACEC,IAAKD,EAAGJ,KACRM,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,QAGVP,EAAGJ,KAVN,KAUcI,EAAGH,OAVjB,QAcJ,OACE,yBAAKW,UAAWC,IAAQnB,OACtB,2CAAiBQ,GACjB,qCACS,uCAAaY,OAAOC,WAAWpB,EAAMqB,OAAOC,QAAQ,O,+BCtB7DC,E,kLAEFC,KAAKxB,MAAMyB,cAAcD,KAAKxB,MAAM0B,MAAOF,KAAKxB,MAAM2B,U,+BAItD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAQb,OAPKL,KAAKxB,MAAM8B,UACdF,EAASJ,KAAKxB,MAAM4B,OAAOpB,KAAI,SAACuB,GAAD,OAC7B,yBAAKrB,IAAKqB,EAAMC,IACd,kBAAC,EAAD,CAAO7B,WAAY4B,EAAM9B,YAAaoB,MAAOU,EAAMV,aAMvD,6BAAMO,O,GAhBSK,aAoCNC,uBAfS,SAACC,GACvB,MAAO,CACLP,OAAQO,EAAMJ,MAAMH,OACpBE,QAASK,EAAMJ,MAAMD,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAGI,SAACU,GAC1B,MAAO,CACLZ,cAAe,SAACC,EAAOC,GAAR,OACbU,EAASC,IAAoBZ,EAAOC,QAI3BO,CAGbK,YAAUhB,EAAQiB","file":"static/js/6.6e2606fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__39wN6\"};","import React from \"react\";\r\nimport classes from \"./Order.module.css\";\r\n\r\nconst Order = (props) => {\r\n  const ingredients = [];\r\n  for (const ingredientName in props.ingredient) {\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredient[ingredientName],\r\n    });\r\n  }\r\n  const ingredientOutput = ingredients.map((ig) => {\r\n    return (\r\n      <span\r\n        key={ig.name}\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 8px\",\r\n          border: \"1px solid #ccc\",\r\n          padding: \"5px\",\r\n        }}\r\n      >\r\n        {ig.name} ({ig.amount})\r\n      </span>\r\n    );\r\n  });\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredientOutput}</p>\r\n      <p>\r\n        price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport axios from \"../../axios\";\r\nimport withError from \"../../HOC/Error/ErrorHandler\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport * as actions from \"../../store/actions/index\";\r\n// const Order = React.lazy(() => import(\"../../components/Order/Order\"));\r\n\r\nclass Orders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    let orders = <Spinner />;\r\n    if (!this.props.loading) {\r\n      orders = this.props.orders.map((order) => (\r\n        <div key={order.id}>\r\n          <Order ingredient={order.ingredients} price={order.price} />\r\n        </div>\r\n      ));\r\n    }\r\n    return (\r\n      // <Suspense fallback={<Spinner />}>\r\n      <div>{orders}</div>\r\n      // </Suspense>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token, userId) =>\r\n      dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withError(Orders, axios));\r\n"],"sourceRoot":""}